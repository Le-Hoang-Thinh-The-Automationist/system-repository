---
# Create Secret Enginer with KV-V2
- name: Enabling all of the initial Secret Engines
  block:
    - name: Enable KV Secret Engine at path 'minikube-kv'
      community.hashi_vault.vault_write:
        url: "{{ VAULT_API_URL }}"
        path: "sys/mounts/minikube-kv"
        data:
          type: "kv"
          description: "Secret Engine for Minikube Cluster minikube-kv"
          options:
            version: 2
      register: result
      ignore_errors: yes

    # - name: Check if KV mount failed due to 'path is already in use'
    #   debug:
    #     msg: "KV secret engine 'minikube-kv' already exists, skipping."
    #   when: result.failed and "'path is already in use' in result.module_stderr"

    # - name: Fail task if error is not 'path is already in use'
    #   fail:
    #     msg: "Failed to enable KV secret engine: {{ result.module_stderr }}"
    #   when: result.failed and "'path is already in use' not in result.msg"

- name: Enabling all of the initial Authentication Methods
  block:
    - name: Enable AppRole Authentication Methods at path 'minikube-roles'
      community.hashi_vault.vault_write:
        path: sys/auth/minikube-roles
        data:
          type: approle
          description: "AppRole auth method for service accounts under minikube-roles"
      register: result
      ignore_errors: yes

    # - name: Check if AppRole mount failed due to 'path is already in use'
    #   debug:
    #     msg: "AppRole auth method 'minikube-roles' already exists, skipping."
    #   when: result.failed and "'path is already in use' in result.module_stderr"

    # - name: Fail task if error is not 'path is already in use'
    #   fail:
    #     msg: "Failed to enable AppRole auth method: {{ result.module_stderr }}"
    #   when: result.failed and "'path is already in use' not in result.msg"


- name: Enabling all of the initial policy
  block:
    - name: Enbale and create Policy for reading database
      community.hashi_vault.vault_write:
        path: sys/policy/read-database-policy
        name: read-database-policy
        data:
          policy: "{{ lookup('file', role_path + '/files/read-database-policy.hcl') }}"
      register: result
      ignore_errors: yes

    # - name: Check if Policy mount failed due to 'path is already in use'
    #   debug:
    #     msg: "Policy for reading database 'read-database-policy' already exists, skipping."
    #   when: result.failed and "'path is already in use' in result.module_stderr"

    # - name: Fail task if error is not 'path is already in use'
    #   fail:
    #     msg: "Failed to enable Policy for reading database: {{ result.module_stderr }}"
    #   when: result.failed and "'path is already in use' not in result.msg"
    

- name: Create a database access secret in 'minikube-kv/application-ns/database'
  community.hashi_vault.vault_kv2_write:
    engine_mount_point: minikube-kv
    path: application-ns/database
    data:
      username: "user"
      password: "password"
      db_url:   "mysql" 
      db_port:  "3306"  
      db_name:  "testdb"  
    read_before_write : true

- name: Create role for backend service
  vars:
    backend_service_authen_path: "auth/minikube-roles/role/backend-service-role"
  block:
    - name: Create Authenticated Role for Backend Service in 'minikube-roles'
      community.hashi_vault.vault_write:
        path: "{{ backend_service_authen_path }}"
        data:
          token_policies: "read-database-policy"
          token_ttl: "20m"
          token_max_ttl: "30m"
          secret_id_num_uses: 40
          secret_id_ttl: 10m
          bind_secret_id: true
      # read_before_write : true
      # register: result
      # ignore_errors: "{{ ' path is already in use' in result.stderr }}"

    - name: Read the Role ID for the Backend Service
      community.hashi_vault.vault_read:
        path: "{{ backend_service_authen_path }}/role-id"
      register: backend_service_role_id

    - name: Write the Secret ID for the Backend Service
      community.hashi_vault.vault_write:
        path: "{{ backend_service_authen_path }}/secret-id"
      register: backend_service_secret_id

    - name: Check for backend-service-role can login to 'minikube-roles'
      community.hashi_vault.vault_login:
        auth_method: approle
        mount_point: minikube-roles
        role_id:     "{{ backend_service_role_id.data.data.role_id }}"
        secret_id:   "{{ backend_service_secret_id.data.data.secret_id }}"

    - name: Output
      debug:
        msg: |
          Role ID:    {{ backend_service_role_id.data.data.role_id }}
          Secret ID:  {{ backend_service_secret_id.data.data.secret_id }}
